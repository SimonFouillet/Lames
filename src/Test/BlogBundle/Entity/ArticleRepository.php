<?php

namespace Test\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
	/**
	 * méthode absolument équivalent au findAll()
	 */
	public function myFindAll() {
		$queryBuilder = $this->createQueryBuilder('a');
		
		$query = $queryBuilder->getQuery();
		
		$resultats = $query->getResult();
		
		return $resultats;
	}
	
	public function myFindOne($id) {
		$queryBuilder = $this	->createQueryBuilder('a')
								->where('a.id = :id')
								->setParameter('id', $id)
								//seuls les article publiés sont affichés
								->andwhere('a.publication = :publication')
								->setParameter('publication', 1)
								;
		
		$query = $queryBuilder->getQuery();
		
		return $query->getSingleResult();
	}
	
	public function findByAuteurAndDate($auteur, $annee) {
		$queryBuilder = $this->createQueryBuilder('a');
		
		$queryBuilder	->where('a.auteur = :auteur')
						->setParameter('auteur', $auteur)
						->andWhere('a.date = :date' )
						->setParameter('date', date_format($annee, 'Y')
						->orderBy('a.date', 'DESC'));
		
		$query = $queryBuilder->getQuery();
		
		return $query->getResult();		
	}
	
	public function whereCurrentYear(\Doctrine\ORM\QueryBuilder $qb)
	{
		$qb->andWhere('a.date BETWEEN :debut AND :fin')
		->setParameter('debut', new \Datetime(date('Y').'-01-01'))  // Date entre le 1er janvier de cette année
		->setParameter('fin',   new \Datetime(date('Y').'-12-31')); // Et le 31 décembre de cette année
	
		return $qb;
	}
	
	public function findByCategorie(array $listeNom) {
		$qb = $this->createQueryBuilder('a');
		
		$qb	->join('a.categories', 'c')
			->where($qb->expr()->in('c.nom', $listeNom));
		
		$query = $qb->getQuery();
		
		return $query->getResult();
	}
	
	/**
	 * ne retourne que les X dernier articles publiés
	 * @param unknown $nbArticles
	 * @return multitype:
	 */
	public function findXLastArticles($nbArticles) {
		$qb = $this->createQueryBuilder('a');
		
		$qb ->orderBy('a.id', 'DESC')
			->setMaxResults($nbArticles);
		
		return $qb->getQuery()->getResult();		
	}
	
	/**
	 * retourne les N articles de la page P dans l'ordre décraoissant
	 * @param unknown $nbParPages
	 * @param unknown $numPage
	 */
	public function getArticles($nbParPages, $numPage) {
		
		if($numPage < 1) {
			throw new \Exception('L\'argument numPage ne peut pas être inférieur à 1 (numPage=['.$numPage.'])');
		}
		$qb = $this->createQueryBuilder('a');
		//seuls les article publiés sont affichés
		$qb->where('a.publication = :publication');
		$qb->setParameter('publication', true);
		$qb->orderBy('a.id', 'DESC');
		$qb->setFirstResult(($numPage - 1) * $nbParPages);
		$qb->setMaxResults($nbParPages);
		
		return new Paginator($qb->getQuery());		
	}
}
